AC_INIT(README.Force)
AC_CANONICAL_TARGET
OPENIPMI_PKG_NAME=OpenIPMI
OPENIPMI_VERSION_MAJOR=2
OPENIPMI_VERSION_MINOR=0
OPENIPMI_VERSION_RELEASE=4
OPENIPMI_VERSION_EXTRA=
AM_INIT_AUTOMAKE(OpenIPMI, ${OPENIPMI_VERSION_MAJOR}.${OPENIPMI_VERSION_MINOR}.${OPENIPMI_VERSION_RELEASE}${OPENIPMI_VERSION_EXTRA})

OPENIPMI_SMI=

case $target_os in
	linux*)
		AC_DEFINE(HAVE_OPENIPMI_SMI)
		;;

	cygwin*)
		AC_DEFINE(HAVE_CYGWIN_TARGET)
		;;
esac

AC_SUBST(OPENIPMI_SMI)

# Check for execinfo.h
AC_CHECK_HEADERS(execinfo.h)

SNMPLIBS=

# Where do we find the UCD SNMP includes and libs
tryucdsnmp=yes
AC_ARG_WITH(ucdsnmp,
[  --with-ucdsnmp=PATH             Look for ucdsnmp in PATH.],
    if test "x$withval" = "xyes"; then
      tryucdsnmp=yes
    elif test "x$withval" = "xno"; then
      tryucdsnmp=no
    elif test -d "$withval"; then
      CPPFLAGS="-I$withval/include $CPPFLAGS"
      SNMPLIBS="-L$withval/lib $SNMPLIBS"
      tryucdsnmp=yes
    fi,
)

AC_ARG_WITH(snmpflags,
[  --with-snmpflags=flags          Set the flags to compile with SNMP.],
    CPPFLAGS="$withval $CPPFLAGS"
)

AC_ARG_WITH(snmplibs,
[  --with-snmplibs=libs            Set the libraries to link with SNMP.],
    SNMPLIBS="$withval"
)

POPTCFLAGS=
AC_ARG_WITH(poptflags,
[  --with-poptflags=flags          Set the flags to compile with popt.],
    CPPFLAGS="$withval $CPPFLAGS"
)

POPTCFLAGS=
AC_ARG_WITH(poptlibs,
[  --with-poptlibs=libs            Set the libraries to link with popt.],
    POPTLIBS="$withval"
)

# If UCD SNMP requires OpenSSL, this tells where to find the crypto lib
tryopenssl=yes
AC_ARG_WITH(openssl,
[  --with-openssl[[=yes|no|PATH]]    Look for openssl, with the optional path.],
    if test "x$withval" = "xyes"; then
      tryopenssl=yes
    elif test "x$withval" = "xno"; then
      tryopenssl=no
    elif test -d "$withval"; then
      SNMPLIBS="-L$withval/lib $SNMPLIBS"
      OPENSSLLIBS="-L$withval/lib"
      OPENSSLINCS="-I$withval/include"
      tryopenssl=yes
    fi,
)

AC_ARG_WITH(opensslflags,
[  --with-opensslflags=flags       Set the flags to compile with OpenSSL.],
    OPENSSLINCS="$withval"
)

AC_ARG_WITH(openssllibs,
[  --with-openssllibs=libs         Set the libraries to link with OpenSSL.],
    OPENSSLLIBS="$withval",
)

tryglib=yes
AC_ARG_WITH(glib,
[  --with-glib=yes|no              Look for glib.],
    if test "x$withval" = "xyes"; then
      tryglib=yes
    elif test "x$withval" = "xno"; then
      tryglib=no
    fi,
)

glibver=
AC_ARG_WITH(glibver,
[  --with-glibver=ver              Set the glib version, either 1.2 or 2.0.],
    glibver="$withval",
)

glibcflags=
AC_ARG_WITH(glibcflags,
[  --with-glibcflags=flags         Set the flags to compile with glib.],
    glibcflags="$withval",
)

gliblibs=
AC_ARG_WITH(gliblibs,
[  --with-gliblibs=libs            Set the libraries to link with glib.],
    gliblibs="$withval",
)

tryperl=yes
perldir=
AC_ARG_WITH(perl,
[  --with-perl[[=yes|no|PATH]]       Look for perl, with the optional path.],
    if test "x$withval" = "xyes"; then
      tryperl=yes
    elif test "x$withval" = "xno"; then
      tryperl=no
    elif test -d "$withval"; then
      perldir="$withval"
      tryperl=yes
    fi,
)

perlinstalldir=
AC_ARG_WITH(perlinstall,
[  --with-perlinstall=PATH         Install perl modules in the given location.],
    perlinstalldir="$withval",
)

perlcflags=
AC_ARG_WITH(perlcflags,
[  --with-perlcflags=PATH          Use the given flags when compiling perl parts.],
    perlcflags="$withval",
)

perlusepthreads=
AC_ARG_WITH(perlusepthreads,
[  --with-perlusepthreads[[=yes|no]] Use threads with perl.],
   if test "x$withval" = "xyes"; then
      perlusepthreads="yes"
   elif test "x$withval" = "xno"; then
      perlusepthreads="no"
   elif test "x$withval" = "x"; then
      perlusepthreads="yes"
   fi,
)

trypython=yes
pythondir=
AC_ARG_WITH(python,
[  --with-python[[=yes|no|PATH]]     Look for python, with the optional path.],
    if test "x$withval" = "xyes"; then
      trypython=yes
    elif test "x$withval" = "xno"; then
      trypython=no
    elif test -d "$withval"; then
      trypython=yes
    fi,
)

pythoninstalldir=
AC_ARG_WITH(pythoninstall,
[  --with-pythoninstall=PATH       Install python modules in the given location.],
    pythoninstalldir="$withval",
)

pythoncflags=
AC_ARG_WITH(pythoncflags,
[  --with-pythoncflags=PATH        Use the given flags when compiling python parts.],
    pythoncflags="$withval",
)

pythonusepthreads=
AC_ARG_WITH(pythonusepthreads,
[  --with-pythonusepthreads[[=yes|no]] Use threads with python.],
   if test "x$withval" = "xyes"; then
      pythonusepthreads="yes"
   elif test "x$withval" = "xno"; then
      pythonusepthreads="no"
   elif test "x$withval" = "x"; then
      pythonusepthreads="yes"
   fi,
)

wxpython=
AC_ARG_WITH(wxpython,
[  --with-wxpython[[=yes|no]]       Use threads with python.],
   if test "x$withval" = "xyes"; then
      wxpython="yes"
   elif test "x$withval" = "xno"; then
      wxpython="no"
   elif test "x$withval" = "x"; then
      wxpython="yes"
   fi,
)

tryswig=yes
swigprog=
AC_ARG_WITH(swig,
[  --with-swig[[=yes|no|PATH]]       Look for swig, with the optional path.],
    if test "x$withval" = "x"; then
      tryswig=yes
    elif test "x$withval" = "xyes"; then
      tryswig=yes
    elif test "x$withval" = "xno"; then
      tryswig=no
    else
      swigprog=$withval
    fi,
)

wxpython=
AC_ARG_WITH(wxpython,
[  --with-wxpython[=PATH]          Look for wxPython.],
    if test "x$withval" = "xyes"; then
      wxpython=yes
    elif test "x$withval" = "xno"; then
      wxpython=no
    elif test -d "$withval"; then
      wxpython=yes
    fi,
)

AC_PROG_CC
AC_PROG_LIBTOOL
AC_STDC_HEADERS
AC_CHECK_FUNCS(getaddrinfo)

AC_SUBST(OPENIPMI_VERSION_MAJOR)
AC_SUBST(OPENIPMI_VERSION_MINOR)
AC_SUBST(OPENIPMI_VERSION_RELEASE)
AC_SUBST(OPENIPMI_VERSION_EXTRA)

AC_SUBST(POPTLIBS)

FOUND_POPT_HEADER=no
AC_CHECK_HEADER(popt.h, FOUND_POPT_HEADER=yes; )
if test "x$FOUND_POPT_HEADER" != "xyes"; then
   echo "Could not find headers for the popt library"
   exit 1
fi

if test "x$POPTLIBS" = "x"; then
   AC_CHECK_LIB(popt, poptHelpOptions, POPTLIBS=-lpopt)
   if test "x$POPTLIBS" = ""; then
      echo "Could not find the popt library"
      exit 1
   fi
fi

# Check for GDBM
AC_CHECK_HEADER(gdbm.h, AC_DEFINE(HAVE_GDBM) GDBM_LIB=-lgdbm; )
AC_SUBST(GDBM_LIB)

# Find pkg-config
pkgprog=
AC_PATH_PROG(pkgprog, pkg-config)

# Handle GLIB support
haveglib=no
if test "x$glibver" = "x" -o "x$glibcflags" = "x" -o "x$gliblibs" = "x"; then
   glibprog=
   if test "x$tryglib" != "xno"; then
      if test "x$pkgprog" != "x"; then
         glibprog=$pkgprog
      else
         AC_PATH_PROG(glibprog, glib-config)
      fi
   fi
   GLIB_CFLAGS=
   GLIB_LIBS=
   if test "x$glibprog" != "x"; then
      # Try 2.0 first
      GLIB_CFLAGS=`$glibprog --cflags gthread-2.0 2>/dev/null`
      if test $? = 0; then
         haveglib=yes
         GLIB_VERSION='2.0'
         GLIB_LIBS=`$glibprog --libs gthread-2.0 2>/dev/null`
      else
         # Now try 1.2
         GLIB_CFLAGS=`$glibprog --cflags gthread`
         if test $? = 0; then
            haveglib=yes
	    GLIB_VERSION='1.2'
	    GLIB_LIBS=`$glibprog --libs gthread`
         fi
      fi
   fi
else
   haveglib=yes
   GLIB_CFLAGS="$glibcflags"
   GLIB_VERSION="$glibver"
   GLIB_LIBS="$gliblibs"
fi
   
if test "x$haveglib" = "xyes"; then
   AC_DEFINE(HAVE_GLIB)
   GLIB_DIR=glib
   GLIB_LIB='$(top_builddir)/glib/libOpenIPMIglib.la'
   GLIB_PKGCONF=OpenIPMIglib.pc
else
   GLIB_DIR=
   GLIB_LIB=
   GLIB_PKGCONF=
fi
AC_SUBST(GLIB_VERSION)
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

AC_SUBST(GLIB_DIR)
AC_SUBST(GLIB_LIB)
AC_SUBST(GLIB_PKGCONF)

# Handle PERL support
if test "x$perlcflags" = "x" -o "x$perlinstalldir" = "x"; then
   perlprog=
   if test "x$tryperl" != "xno"; then
      AC_PATH_PROG(perlprog, perl)
   fi
   if test "x$perlprog" != "x"; then
      # Find the place where perl lives.
      if test "x$perldir" = "x"; then
	 perldir=`$perlprog -e 'for $i (@INC) { if (-r "$i/CORE/perl.h") { print "$i"; last; } }'`
      fi

      # Now find a proper installation location.
      if test "x$perlinstalldir" = "x"; then
	 perlinstalldir=`$perlprog -e 'for $i (@INC) { if ($i =~ /site_perl\/.+\/.+/) { print "$i"; last; } }'`
	 if test "x$perlinstalldir" = "x" -o ! -d "$perlinstalldir"; then
	    perlinstalldir=`$perlprog -e 'for $i (@INC) { if ($i =~ /vendor_perl\/.+\/.+/) { print "$i"; last; } }'`
	 fi
	 if test "x$perlinstalldir" = "x" -o ! -d "$perlinstalldir"; then
	    perlinstalldir=$perldir
	 fi
      fi
   fi

   if test "x$perldir" != "x"; then
      tpprog=`$perlprog -e "\\$p = \"$perlinstalldir\"; \\$u = \"$prefix\"; \\$p =~ s/\\$u//; print \\$p"`
      AC_DEFINE(HAVE_PERL)
      PERL_DIR=perl
      if test "x$perlcflags" = "x"; then
         PERL_CFLAGS="-I $perldir/CORE `$perlprog -V:ccflags | grep ccflags | sed 's/^.*ccflags=.\(.*\).;$/\1/'`"
      else
	  PERL_CFLAGS="$perlcflags"
      fi
      if test "$tpprog" = "$perlinstalldir"; then
	 PERL_INSTALL_DIR="$perlinstalldir"
      else
	 PERL_INSTALL_DIR="\${prefix}$tpprog"
      fi

   else
      PERL_DIR=
      PERL_CFLAGS=
      PERL_INSTALL_DIR=
      PERL_HAS_POSIX_THREADS=
      PERL_POSIX_LIB=
   fi
else
   AC_DEFINE(HAVE_PERL)
   PERL_DIR=perl
   PERL_CFLAGS="$perlcflags"
   PERL_INSTALL_DIR="$perlinstalldir"
fi
if test "x$perlprog" != "x"; then
   if test "x$perlusepthreads" = "x"; then
      if $perlprog -V:usethreads | grep -q 'define'; then
         perlusepthreads="yes"
      fi
   fi
fi
if test "x$perlusepthreads" = "xyes"; then
   PERL_HAS_POSIX_THREADS=1
   PERL_POSIX_LIB='$(top_builddir)/unix/libOpenIPMIpthread.la'
else
   PERL_HAS_POSIX_THREADS=0
   PERL_POSIX_LIB='$(top_builddir)/unix/libOpenIPMIposix.la'
fi
AC_SUBST(PERL_DIR)
AC_SUBST(PERL_CFLAGS)
AC_SUBST(PERL_INSTALL_DIR)
AC_SUBST(PERL_HAS_POSIX_THREADS)
AC_SUBST(PERL_POSIX_LIB)

# Handle PYTHON support
if test "x$pythoncflags" = "x" -o "x$pythoninstalldir" = "x"; then
   pythonprog=
   if test "x$trypython" != "xno"; then
      AC_PATH_PROG(pythonprog, python)
   fi
   if test "x$pythonprog" != "x"; then
      # Now find a proper installation location.
      if test "x$pythoninstalldir" = "x"; then
	 pythoninstalldir=`$pythonprog -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_lib();'`
	 if test "x$pythoninstalldir" = "x" -o ! -d "$pythoninstalldir"; then
	    pythoninstalldir=
	 fi
      fi
   fi

   if test "x$pythoncflags" = "x"; then
      pythoninc=`$pythonprog -c 'import distutils.sysconfig; print distutils.sysconfig.get_python_inc();'`
      if test "x$pythoninc" != "x"; then
         pythoncflags="-I$pythoninc"
      else
         pythoncflags=""
      fi
   else
      PYTHON_CFLAGS="$pythoncflags"
   fi

   if test "x$pythoninstalldir" != "x"; then
      AC_DEFINE(HAVE_PYTHON)
      PYTHON_DIR=python
      PYTHON_CFLAGS="$pythoncflags"
      PYTHON_INSTALL_DIR="$pythoninstalldir"
   else
      PYTHON_DIR=
      PYTHON_CFLAGS=
      PYTHON_INSTALL_DIR=
   fi
else
   AC_DEFINE(HAVE_PYTHON)
   PYTHON_DIR=python
   PYTHON_CFLAGS="$pythoncflags"
   PYTHON_INSTALL_DIR="$pythoninstalldir"
fi
if test "x$pythonprog" != "x"; then
   if test "x$pythonusepthreads" = "x"; then
      pythonusepthreads=`echo -e "try:\n  import thread\n  print 'yes'\nexcept:\n  print 'no'\n" | python`
   fi
fi
if test "x$pythonusepthreads" = "xyes"; then
   PYTHON_HAS_POSIX_THREADS=1
   PYTHON_POSIX_LIB='$(top_builddir)/unix/libOpenIPMIpthread.la'
else
   PYTHON_HAS_POSIX_THREADS=0
   PYTHON_POSIX_LIB='$(top_builddir)/unix/libOpenIPMIposix.la'
fi
AC_SUBST(PYTHON_DIR)
AC_SUBST(PYTHON_CFLAGS)
AC_SUBST(PYTHON_INSTALL_DIR)
AC_SUBST(PYTHON_HAS_POSIX_THREADS)
AC_SUBST(PYTHON_POSIX_LIB)

# Check for wxPython
if test "x$wxpython" = "x"; then
   if test "x$pythonprog" != "x"; then
      wxpython=`echo -e "try:\n  import wx\n  print 'yes'\nexcept:\n  print 'no'\n" | python`
   fi
fi
if test "x$wxpython" = "xyes"; then
   PYTHON_GUI_DIR=openipmigui
else
   PYTHON_GUI_DIR=
fi
AC_SUBST(PYTHON_GUI_DIR)

# Now check for swig
if test "x$swigprog" = "x" -a "x$tryswig" = "xyes"; then
   AC_PATH_PROG(swigprog, swig)
fi
if test "x$swigprog" != "x"; then
   swigver=`$swigprog -version 2>&1 | grep 'SWIG Version' | sed 's/SWIG Version //'`
   swigmajor=`echo $swigver | sed 's/\.[[0-9]]*\.[[0-9]]*$//'`
   swigminor=`echo $swigver | sed 's/^[[0-9]]*\.\([[0-9]]*\)\.[[0-9]]*$/\1/'`
   swigrel=`echo $swigver | sed 's/^[[0-9]]*\.[[0-9]]*\.//'`
   if test '(' "$swigmajor" -lt 1 ')' -o '(' '(' "$swigmajor" -eq 1 ')' -a '(' "$swigminor" -lt 3 ')' ')' -o '(' '(' "$swigmajor" -eq 1 ')' -a '(' "$swigminor" -eq 3 ')' -a '(' "$swigrel" -lt 21 ')' ')'; then
      echo "***swig must be version 1.3.21 or greater, disabling swig and perl/python"
   else
      echo "swig version $swigver"
      AC_DEFINE(HAVE_SWIG)
      SWIG_DIR=swig
      SWIG=$swigprog
   fi
else
   SWIG_DIR=
   SWIG=
fi
AC_SUBST(SWIG_DIR)
AC_SUBST(SWIG)

# Handle SNMP support
if test "x$tryucdsnmp" != "xno"; then

   HAVE_UCDSNMP=no
   HAVE_NETSNMP=no
   FOUND_SNMPINCL=no
   # Try net snmp first
   AC_CHECK_HEADER(net-snmp/net-snmp-config.h,
                   FOUND_SNMPINCL=yes; HAVE_NETSNMP=yes; )
   if test "x$FOUND_SNMPINCL" = "xno"; then
      # Try old UCD snmp
      AC_CHECK_HEADER(snmp_api.h, FOUND_SNMPINCL=yes; )
      if test "x$FOUND_SNMPINCL" = "xno"; then
          AC_CHECK_HEADER(ucd-snmp/snmp_api.h,
                   FOUND_SNMPINCL=yes;
		   AC_DEFINE(HAVE_ALT_UCDSNMP_DIR))
      fi
   fi

   if test "x$FOUND_SNMPINCL" = "xyes"; then
      if test "x$HAVE_NETSNMP" = "xyes"; then
         AC_CHECK_LIB(netsnmp, snmp_add, 
		      SNMPLIBS="-lnetsnmp $SNMPLIBS"
		      AC_DEFINE(HAVE_UCDSNMP)
		      AC_DEFINE(HAVE_NETSNMP)
		      HAVE_UCDSNMP=yes
		      HAVE_NETSNMP=yes,
		      ,
		      $SNMPLIBS)
         if test "x$HAVE_UCDSNMP" = "xno"; then
	     # Try net snmp with crypto
	     AC_CHECK_LIB(netsnmp, snmp_add_full, 
	                  SNMPLIBS="-lnetsnmp -lcrypto $SNMPLIBS"
			  AC_DEFINE(HAVE_UCDSNMP)
			  AC_DEFINE(HAVE_NETSNMP)
			  HAVE_UCDSNMP=yes
			  HAVE_NETSNMP=yes,
			  ,
			  -lcrypto $SNMPLIBS)
         fi
         if test "x$HAVE_UCDSNMP" = "xno"; then
	     AC_MSG_WARN([Found NET SNMP include files, but could not find libraries])
	 fi
      else
         AC_CHECK_LIB(snmp, snmp_open_ex, 
		      SNMPLIBS="-lsnmp $SNMPLIBS"
		      AC_DEFINE(HAVE_UCDSNMP)
		      HAVE_UCDSNMP=yes,
		      ,
		      $SNMPLIBS)
         if test "x$HAVE_UCDSNMP" = "xno"; then
            # Try with the crypto lib
            AC_CHECK_LIB(snmp, snmp_sess_perror, 
		         SNMPLIBS="-lsnmp -lcrypto $SNMPLIBS"
			 AC_DEFINE(HAVE_UCDSNMP)
			 HAVE_UCDSNMP=yes,
			 ,
			 -lcrypto $SNMPLIBS)
         fi
         if test "x$HAVE_UCDSNMP" = "xno"; then
	     AC_MSG_WARN([Found UCD SNMP include files, but could not find libraries])
	 fi
      fi
   fi
fi

AC_SUBST(SNMPLIBS)

# Handle SNMP support
if test "x$tryopenssl" != "xno"; then

   HAVE_OPENSSL=no
   # Try net snmp first
   AC_CHECK_HEADER(openssl/crypto.h, FOUND_OPENSSL=yes; )

   if test "x$FOUND_OPENSSL" = "xyes"; then
      AC_CHECK_LIB(crypto, CRYPTO_malloc, 
		   OPENSSLLIBS="-lcrypto $OPENSSLLIBS"
		   AC_DEFINE(HAVE_OPENSSL)
		   HAVE_OPENSSL=yes,
		   ,
		   $OPENSSLLIBS)
   fi
fi

AC_SUBST(OPENSSLLIBS)
AC_SUBST(OPENSSLINCS)

AC_OUTPUT(Makefile
	  utils/Makefile
	  lib/Makefile
	  unix/Makefile
	  glib/Makefile
	  ui/Makefile
	  lanserv/Makefile
	  sample/Makefile
	  doc/Makefile
	  man/Makefile
	  swig/Makefile
	  swig/perl/Makefile
	  swig/python/Makefile
	  swig/python/openipmigui/Makefile
	  cmdlang/Makefile
	  include/Makefile
	  include/OpenIPMI/Makefile
	  include/OpenIPMI/ipmiif.h
	  include/OpenIPMI/internal/Makefile
	  include/linux/Makefile
	  include/net/Makefile
	  OpenIPMI.spec
	  OpenIPMIutils.pc
	  OpenIPMI.pc
	  OpenIPMIpthread.pc
	  OpenIPMIposix.pc
	  OpenIPMIglib.pc
	  OpenIPMIcmdlang.pc
	  OpenIPMIui.pc)
